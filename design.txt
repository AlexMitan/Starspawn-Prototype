next: event queueing

Command: [Word*]



Entity
    baseName: str 

Word < Entity

Intent
    representation: [Entity*]
    queue: [Action*]

Signal
    type: str

Action
    +- effect: int | Action*
    +- wait: int
    +- condition: func()
    +- signals: [Signal*]

Pattern
    actions() => [Action*] 

loop:
    1) getIntent() - hangs for input
        start ready
        for every actor, get intent.
        if not ready, redo in 50ms
    2) emitSignals() - instant
        start !ready
        while not ready
            set ready
            for every Action, propagate signal
                clear signals of action
                queue extra Actions after emitter and unset "ready"

    3) execute() - instant if waiting on ewcs Action
        while not empty:
            get next Action
                if condition()
                    if effect()
                        do effect
                if waiting, set timeout and run execute()
        run getIntent()

next steps:
    visible object tree
    area movement
        one-way, two-way
            A <---> B
            A ----> B
        access
            A x ???    B
            A x------> B
            A ---x---> B
            A ------x> B
    Bootstrap UI
    log items
    on-mouse-over examine - hold mouse over to charge

fancy:
    D3 transitions
